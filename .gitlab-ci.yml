image: docker:19.03.10

variables:
  # DOCKER_HOST: tcp://0.0.0.0:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_AUTH_CONFIG: "{\"credsStore\": \"ecr-login\"}"

services:
  - docker:dind

stages:   
  - build
  - deploy

before_script:
    - apk add --update --no-cache curl jq python3 py3-pip bash
    - pip3 install awscli
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"

dev-build-job:
  stage: build
  script:
    # - export DOCKER_HOST=tcp://0.0.0.0:2375/
    - echo $AWS_ACCESS_KEY_ID
    - echo $AWS_DEFAULT_REGION
    - echo $AWS_SECRET_ACCESS_KEY
    - cp $ENV_FILE .env
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - docker build -t $REPOSITORY_URL:$IMAGE_TAG .
    - docker push $REPOSITORY_URL:$IMAGE_TAG

    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE .
    - docker push "$CI_REGISTRY_IMAGE"

  only:
    - dev

  tags:
    - gallerist-node


dev-deploy-job:
  stage: deploy
  script:
    - echo `aws ecs describe-task-definition --task-definition  $AWS_ECS_TASK_DEFINITION --region $AWS_DEFAULT_REGION` > input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="'$REPOSITORY_URL':'$IMAGE_TAG'"') > input.json
    - echo $(cat input.json | jq '.taskDefinition') > input.json
    - echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities)' | jq 'del(.registeredAt)' | jq 'del(.registeredBy)') > input.json
    - aws ecs register-task-definition --cli-input-json file://input.json --region $AWS_DEFAULT_REGION 
    - revision=$(aws ecs describe-task-definition --task-definition $AWS_ECS_TASK_DEFINITION --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
    - aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE --force-new-deployment --task-definition $AWS_ECS_TASK_DEFINITION:$revision --region $AWS_DEFAULT_REGION
  only:
    - dev

  tags:
    - gallerist-node


live-build-job:
  stage: build
  before_script:
    - apk add --update --no-cache curl jq python3 py3-pip bash
    - pip3 install awscli
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
    - export AWS_ACCESS_KEY_ID=$LIVE_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$LIVE_AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$LIVE_AWS_DEFAULT_REGION
    - export AWS_ACCOUNT_ID=$LIVE_AWS_ACCOUNT_ID
  script:
    # - export DOCKER_HOST=tcp://0.0.0.0:2375/
    - echo $LIVE_AWS_ACCESS_KEY_ID
    - echo $LIVE_AWS_DEFAULT_REGION
    - echo $LIVE_AWS_SECRET_ACCESS_KEY
    - cp $LIVE_ENV_FILE .env
    - aws ecr get-login-password --region $LIVE_AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $LIVE_AWS_ACCOUNT_ID.dkr.ecr.$LIVE_AWS_DEFAULT_REGION.amazonaws.com
    - docker build -t $LIVE_REPOSITORY_URL:$IMAGE_TAG .
    - docker push $LIVE_REPOSITORY_URL:$IMAGE_TAG

  only:
    - main

  tags:
    - gallerist-node


live-deploy-job:
  stage: deploy
  before_script:
    - apk add --update --no-cache curl jq python3 py3-pip bash
    - pip3 install awscli
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
    - export AWS_ACCESS_KEY_ID=$LIVE_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$LIVE_AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$LIVE_AWS_DEFAULT_REGION
    - export AWS_ACCOUNT_ID=$LIVE_AWS_ACCOUNT_ID
  script:
    - echo `aws ecs describe-task-definition --task-definition  $LIVE_AWS_ECS_TASK_DEFINITION --region $LIVE_AWS_DEFAULT_REGION` > input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="'$LIVE_REPOSITORY_URL':'$IMAGE_TAG'"') > input.json
    - echo $(cat input.json | jq '.taskDefinition') > input.json
    - echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities)' | jq 'del(.registeredAt)' | jq 'del(.registeredBy)') > input.json
    - aws ecs register-task-definition --cli-input-json file://input.json --region $LIVE_AWS_DEFAULT_REGION 
    - revision=$(aws ecs describe-task-definition --task-definition $LIVE_AWS_ECS_TASK_DEFINITION --region $LIVE_AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
    - aws ecs update-service --cluster $LIVE_AWS_ECS_CLUSTER --service $LIVE_AWS_ECS_SERVICE --force-new-deployment --task-definition $LIVE_AWS_ECS_TASK_DEFINITION:$revision --region $LIVE_AWS_DEFAULT_REGION
  only:
    - main

  tags:
    - gallerist-node

